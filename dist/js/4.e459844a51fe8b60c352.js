webpackJsonp([4],{272:function(i,l){i.exports='<h1 id="git">Git使用介绍</h1>\n<h2 id="">简介</h2>\n<ul>\n<li>Git是一个分布式版本控制软件, 2005年发布</li>\n<li>之前的版本管理工具: CVS、Subversion、SVN</li>\n<li>通过Git进行版本控制的软件源代码托管服务的主流网站有: Github、Gitlab、Bitbucket</li>\n<li>国产代码托管平台: <a href="https://git.oschina.net/">码云</a>、<a href="https://coding.net/">Coding</a></li>\n<li>Git工具: 命令行、编辑器集成、Github客户端、Bitbucket客户端(SourceTree)</li>\n</ul>\n<blockquote>\n  <p>Git很强大，也很简单。全部命令非常多，但完成日常工作只需要掌握 <strong>极其少数</strong> 的命令即可。其他的可以在工作中遇到调整再去学习。</p>\n  <p>建议初学者使用命令行操作, 使用客户端仅查看变化以便理解git的作用</p>\n</blockquote>\n<h2 id="-1">安装</h2>\n<ul>\n<li><a href="https://git-scm.com/download/">Git客户端</a></li>\n<li>Mac用户安装XCode之后执行git命令会提示安装</li>\n</ul>\n<h2 id="-2">作用</h2>\n<p>git的核心作用有两个：文件管理，多人协作。</p>\n<blockquote>\n  <p>文件管理：git在不断的备份文件(git内部是使用diff存储每次的更改而非真的备份全部)。</p>\n  <p>多人协作：git通过代码合并、分支管理等功能让多名参与者能同时开发项目。</p>\n</blockquote>\n<p>贴个图感受下~</p>\n<p><img src="http://oloqdvms7.bkt.clouddn.com/git-demo.png" alt="Git-Demo" /></p>\n<h2 id="-3">核心概念</h2>\n<ul>\n<li>Workspace 工作区</li>\n<li>Stage 暂存区</li>\n<li>Repository 本地仓库</li>\n<li>Remote 远程仓库</li>\n</ul>\n<p><img src="http://oloqdvms7.bkt.clouddn.com/git.png" alt="关系图" /></p>\n<blockquote>\n  <p>总的来说，可以分为远程和本地。远程用于存储项目的最新状态，而本地用于个人开发。个人可以从远程拉取最新代码，也可以将自己的修改提交到远程。</p>\n</blockquote>\n<h2 id="-4">术语</h2>\n<p>以下是一些学习git中会经常遇到的术语</p>\n<p>| 单词 | 释义 | 单词 | 释义 |\n| --- | --- | --- | --- |\n| repository | 版本库 | branch | 分支 |\n| checkout | 撤销 | reset | 重置 |\n| log | 日志 | merge | 合并 |\n| stash | 隐藏 | drop | 放弃 |\n| push | 推送 | pull | 拉取 |</p>\n<h2 id="git-1">Git常用命令</h2>\n<h3 id="-5">安装和配置</h3>\n<ul>\n<li><p>git help：git子命令和核心概念一览表</p></li>\n<li><p>git help [subcommand]：查看指定git子命令的简介</p></li>\n<li><p>git config</p></li>\n<li><p>git config --list 查看git配置列表</p></li>\n<li><p>git config -e [--global] 查看编辑git配置文件</p></li>\n<li><p>git config user.name "YOUR_NAME" 查看/设置用户名(当前项目)</p></li>\n<li><p>git config user.email "YOUR_EMAIL" 查看/设置用户邮箱(当前项目)</p></li>\n<li><p>git config --global user.name "YOUR_NAME" 查看/设置用户名(全局)</p></li>\n<li><p>git config --global user.email "YOUR_EMAIL" 查看/设置用户邮箱(全局)</p></li>\n<li><p>vim ~/.gitconfig：git配置文件</p></li>\n</ul>\n<h3 id="-6">拉取项目</h3>\n<ul>\n<li>git clone [url]</li>\n</ul>\n<blockquote>\n  <p>作为初学者，可以选择去Github去注册账号，然后自己新建一个项目随意折腾。</p>\n</blockquote>\n<h3 id="-7">文件操作</h3>\n<ul>\n<li>git add：添加文件或文件夹</li>\n<li>git add .</li>\n<li>git add [file1] [file2]</li>\n<li>git add [dir1] [dir2]</li>\n<li>git rm：删除文件或文件夹</li>\n<li>git rm .</li>\n<li>git rm [file1] [file2]</li>\n<li>git rm --cached [file1] [file2] 从版本控制中移除但保留文件</li>\n<li>git mv：重命名</li>\n<li>git mv [file1] [file2]</li>\n</ul>\n<blockquote>\n  <p>有一个很普遍的误解是以为 git add <code>.</code> 中的 <code>.</code> 是指所有的意思。其实 <code>.</code> 是指相对路径，即当前目录。</p>\n</blockquote>\n<h3 id="-8">提交代码</h3>\n<ul>\n<li>git commit：提交指定文件或目录到本地仓库</li>\n<li>git commit -m \'注释\'</li>\n<li>git commit [file] [folder] -m \'注释\'</li>\n<li>git commit -am \'注释\'：提交工作区自上次commit之后的变化，直接到仓库区</li>\n<li>git commit --amend -m [message]：使用一次新的commit，替代上一次提交</li>\n</ul>\n<h2 id="-9">撤销</h2>\n<ul>\n<li>git checkout</li>\n<li>git checkout .</li>\n<li>git checkout [file1] [file2]</li>\n<li>git checkout [commit_id] [file]</li>\n<li>git reset</li>\n<li>git reset [file1] [file2]</li>\n<li>git reset --hard</li>\n<li>git reset [commit_id]</li>\n<li>git reset --hard [commit_id]</li>\n</ul>\n<h2 id="-10">隐藏</h2>\n<ul>\n<li>git stash</li>\n<li>git stash</li>\n<li>git stash list</li>\n<li>git stash pop</li>\n<li>git stash drop</li>\n</ul>\n<blockquote>\n  <p>tip: 很容易忘记你曾经隐藏了修改，慎用~</p>\n</blockquote>\n<h2 id="-11">查看信息</h2>\n<ul>\n<li>git status</li>\n<li>git diff</li>\n<li>git diff：显示工作区和工作区的差异</li>\n<li>git diff [file]：查看指定文件改动的地方(工作区与本地仓库文件内容的对比)</li>\n<li>git log</li>\n<li>git log：显示commit历史</li>\n<li>git log --stat：显示commit历史，以及每次commit发生变更的文件</li>\n<li>git log -p [files]：显示指定文件的每次commit的diff</li>\n<li>git log -[number] --pretty --oneline：显示最近number次的log</li>\n<li>git show</li>\n<li>git show [commit<em>id]：显示指定commit</em>id的diff</li>\n<li>git show [commit<em>id] [file]：显示指定commit</em>id下指定文件的diff</li>\n</ul>\n<h3 id="-12">分支</h3>\n<ul>\n<li>git branch</li>\n<li>git branch：显示本地分支列表</li>\n<li>git branch -r：显示远程分支列表</li>\n<li>git branch -a：显示本地分支列表+远程分支列表</li>\n<li>git branch [branch_name]：新建分支，不切换分支</li>\n<li>git branch [branch<em>name] [commit</em>id]：新建分支，并指向指定commit_id</li>\n<li>git branch -d [branch_name]：删除分支</li>\n<li>git checkout</li>\n<li>git checkout [branch_name]：切换分支</li>\n<li>git checkout -b [branch_name]：新建分支，并切换到该分支</li>\n<li>git checkout -：切换到上一次所在分支</li>\n<li>git cherry-pick</li>\n<li>git cherry-pick [commit_id]：将其他分支的commit提交到当前分支</li>\n<li>git merge</li>\n<li>git merge [branch_name]：合并指定分支到当前分支</li>\n</ul>\n<h3 id="-13">远程同步</h3>\n<ul>\n<li>git pull</li>\n<li>git pull [remote] [branch_name]：拉取远程仓库的指定分支的代码与当前分支合并</li>\n<li>git push</li>\n<li>git push origin [branch_name]：提交当前分支与远程指定分支合并</li>\n<li>git push origin :[branch_name]：删除远程分支</li>\n</ul>\n<blockquote>\n  <p>远程仓库（即<code>remote</code>）名一般就是 <code>origin</code></p>\n  <p>文件(图片除外)操作请尽量使用linux命令</p>\n</blockquote>\n<h3 id="merge_requests">merge_requests</h3>\n<ul>\n<li>当项目参与者比较多，或者有安全性或者别的不想让参与者直接提交代码的时候，可以采用 <code>merge_requests</code> 模式。</li>\n<li>可以进行 <code>code review</code></li>\n<li>这是一种比较推荐的git使用方式，具体使用方式请自行百度，然后找个人一起练习一下就能轻松掌握~</li>\n</ul>\n<h2 id="-14">参考资料</h2>\n<ul>\n<li><a href="https://zh.wikipedia.org/wiki/Git">Git 维基百科</a></li>\n<li><a href="http://baike.baidu.com/item/GIT/12647237">Git 百度百科</a></li>\n<li><a href="https://git-scm.com/book/zh/v2">Git Pro</a></li>\n<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">Git 常用命令清单 阮一峰</a></li>\n</ul>'}});